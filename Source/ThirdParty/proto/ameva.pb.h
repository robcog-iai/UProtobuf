// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ameva.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ameva_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ameva_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "viz.pb.h"
#include "tutorial.pb.h"
#include "control.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ameva_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ameva_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ameva_2eproto;
namespace sl_pb {
class KRAmevaEvent;
class KRAmevaEventDefaultTypeInternal;
extern KRAmevaEventDefaultTypeInternal _KRAmevaEvent_default_instance_;
}  // namespace sl_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sl_pb::KRAmevaEvent* Arena::CreateMaybeMessage<::sl_pb::KRAmevaEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sl_pb {

enum KRAmevaEvent_FuncToCall : int {
  KRAmevaEvent_FuncToCall_SetTask = 1,
  KRAmevaEvent_FuncToCall_SetEpisode = 2,
  KRAmevaEvent_FuncToCall_DrawMarkerAt = 3,
  KRAmevaEvent_FuncToCall_DrawMarkerTraj = 4,
  KRAmevaEvent_FuncToCall_HelloWorld = 5
};
bool KRAmevaEvent_FuncToCall_IsValid(int value);
constexpr KRAmevaEvent_FuncToCall KRAmevaEvent_FuncToCall_FuncToCall_MIN = KRAmevaEvent_FuncToCall_SetTask;
constexpr KRAmevaEvent_FuncToCall KRAmevaEvent_FuncToCall_FuncToCall_MAX = KRAmevaEvent_FuncToCall_HelloWorld;
constexpr int KRAmevaEvent_FuncToCall_FuncToCall_ARRAYSIZE = KRAmevaEvent_FuncToCall_FuncToCall_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KRAmevaEvent_FuncToCall_descriptor();
template<typename T>
inline const std::string& KRAmevaEvent_FuncToCall_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KRAmevaEvent_FuncToCall>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KRAmevaEvent_FuncToCall_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KRAmevaEvent_FuncToCall_descriptor(), enum_t_value);
}
inline bool KRAmevaEvent_FuncToCall_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KRAmevaEvent_FuncToCall* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KRAmevaEvent_FuncToCall>(
    KRAmevaEvent_FuncToCall_descriptor(), name, value);
}
// ===================================================================

class KRAmevaEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sl_pb.KRAmevaEvent) */ {
 public:
  inline KRAmevaEvent() : KRAmevaEvent(nullptr) {}
  virtual ~KRAmevaEvent();

  KRAmevaEvent(const KRAmevaEvent& from);
  KRAmevaEvent(KRAmevaEvent&& from) noexcept
    : KRAmevaEvent() {
    *this = ::std::move(from);
  }

  inline KRAmevaEvent& operator=(const KRAmevaEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KRAmevaEvent& operator=(KRAmevaEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KRAmevaEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KRAmevaEvent* internal_default_instance() {
    return reinterpret_cast<const KRAmevaEvent*>(
               &_KRAmevaEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KRAmevaEvent& a, KRAmevaEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KRAmevaEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KRAmevaEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KRAmevaEvent* New() const final {
    return CreateMaybeMessage<KRAmevaEvent>(nullptr);
  }

  KRAmevaEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KRAmevaEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KRAmevaEvent& from);
  void MergeFrom(const KRAmevaEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KRAmevaEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sl_pb.KRAmevaEvent";
  }
  protected:
  explicit KRAmevaEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ameva_2eproto);
    return ::descriptor_table_ameva_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef KRAmevaEvent_FuncToCall FuncToCall;
  static constexpr FuncToCall SetTask =
    KRAmevaEvent_FuncToCall_SetTask;
  static constexpr FuncToCall SetEpisode =
    KRAmevaEvent_FuncToCall_SetEpisode;
  static constexpr FuncToCall DrawMarkerAt =
    KRAmevaEvent_FuncToCall_DrawMarkerAt;
  static constexpr FuncToCall DrawMarkerTraj =
    KRAmevaEvent_FuncToCall_DrawMarkerTraj;
  static constexpr FuncToCall HelloWorld =
    KRAmevaEvent_FuncToCall_HelloWorld;
  static inline bool FuncToCall_IsValid(int value) {
    return KRAmevaEvent_FuncToCall_IsValid(value);
  }
  static constexpr FuncToCall FuncToCall_MIN =
    KRAmevaEvent_FuncToCall_FuncToCall_MIN;
  static constexpr FuncToCall FuncToCall_MAX =
    KRAmevaEvent_FuncToCall_FuncToCall_MAX;
  static constexpr int FuncToCall_ARRAYSIZE =
    KRAmevaEvent_FuncToCall_FuncToCall_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FuncToCall_descriptor() {
    return KRAmevaEvent_FuncToCall_descriptor();
  }
  template<typename T>
  static inline const std::string& FuncToCall_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FuncToCall>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FuncToCall_Name.");
    return KRAmevaEvent_FuncToCall_Name(enum_t_value);
  }
  static inline bool FuncToCall_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FuncToCall* value) {
    return KRAmevaEvent_FuncToCall_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSetTaskParamFieldNumber = 2,
    kSetEpisodeParamsFieldNumber = 3,
    kDrawMarkerAtParamsFieldNumber = 4,
    kDrawMarkerTrajParamsFieldNumber = 5,
    kHelloWorldParamsFieldNumber = 6,
    kFuncToCallFieldNumber = 1,
  };
  // optional .sl_pb.SetTaskParams setTaskParam = 2;
  bool has_settaskparam() const;
  private:
  bool _internal_has_settaskparam() const;
  public:
  void clear_settaskparam();
  const ::sl_pb::SetTaskParams& settaskparam() const;
  ::sl_pb::SetTaskParams* release_settaskparam();
  ::sl_pb::SetTaskParams* mutable_settaskparam();
  void set_allocated_settaskparam(::sl_pb::SetTaskParams* settaskparam);
  private:
  const ::sl_pb::SetTaskParams& _internal_settaskparam() const;
  ::sl_pb::SetTaskParams* _internal_mutable_settaskparam();
  public:
  void unsafe_arena_set_allocated_settaskparam(
      ::sl_pb::SetTaskParams* settaskparam);
  ::sl_pb::SetTaskParams* unsafe_arena_release_settaskparam();

  // optional .sl_pb.SetEpisodeParams setEpisodeParams = 3;
  bool has_setepisodeparams() const;
  private:
  bool _internal_has_setepisodeparams() const;
  public:
  void clear_setepisodeparams();
  const ::sl_pb::SetEpisodeParams& setepisodeparams() const;
  ::sl_pb::SetEpisodeParams* release_setepisodeparams();
  ::sl_pb::SetEpisodeParams* mutable_setepisodeparams();
  void set_allocated_setepisodeparams(::sl_pb::SetEpisodeParams* setepisodeparams);
  private:
  const ::sl_pb::SetEpisodeParams& _internal_setepisodeparams() const;
  ::sl_pb::SetEpisodeParams* _internal_mutable_setepisodeparams();
  public:
  void unsafe_arena_set_allocated_setepisodeparams(
      ::sl_pb::SetEpisodeParams* setepisodeparams);
  ::sl_pb::SetEpisodeParams* unsafe_arena_release_setepisodeparams();

  // optional .sl_pb.DrawMarkerAtParams drawMarkerAtParams = 4;
  bool has_drawmarkeratparams() const;
  private:
  bool _internal_has_drawmarkeratparams() const;
  public:
  void clear_drawmarkeratparams();
  const ::sl_pb::DrawMarkerAtParams& drawmarkeratparams() const;
  ::sl_pb::DrawMarkerAtParams* release_drawmarkeratparams();
  ::sl_pb::DrawMarkerAtParams* mutable_drawmarkeratparams();
  void set_allocated_drawmarkeratparams(::sl_pb::DrawMarkerAtParams* drawmarkeratparams);
  private:
  const ::sl_pb::DrawMarkerAtParams& _internal_drawmarkeratparams() const;
  ::sl_pb::DrawMarkerAtParams* _internal_mutable_drawmarkeratparams();
  public:
  void unsafe_arena_set_allocated_drawmarkeratparams(
      ::sl_pb::DrawMarkerAtParams* drawmarkeratparams);
  ::sl_pb::DrawMarkerAtParams* unsafe_arena_release_drawmarkeratparams();

  // optional .sl_pb.DrawMarkerTrajParams drawMarkerTrajParams = 5;
  bool has_drawmarkertrajparams() const;
  private:
  bool _internal_has_drawmarkertrajparams() const;
  public:
  void clear_drawmarkertrajparams();
  const ::sl_pb::DrawMarkerTrajParams& drawmarkertrajparams() const;
  ::sl_pb::DrawMarkerTrajParams* release_drawmarkertrajparams();
  ::sl_pb::DrawMarkerTrajParams* mutable_drawmarkertrajparams();
  void set_allocated_drawmarkertrajparams(::sl_pb::DrawMarkerTrajParams* drawmarkertrajparams);
  private:
  const ::sl_pb::DrawMarkerTrajParams& _internal_drawmarkertrajparams() const;
  ::sl_pb::DrawMarkerTrajParams* _internal_mutable_drawmarkertrajparams();
  public:
  void unsafe_arena_set_allocated_drawmarkertrajparams(
      ::sl_pb::DrawMarkerTrajParams* drawmarkertrajparams);
  ::sl_pb::DrawMarkerTrajParams* unsafe_arena_release_drawmarkertrajparams();

  // optional .sl_pb.HelloWorldParams HelloWorldParams = 6;
  bool has_helloworldparams() const;
  private:
  bool _internal_has_helloworldparams() const;
  public:
  void clear_helloworldparams();
  const ::sl_pb::HelloWorldParams& helloworldparams() const;
  ::sl_pb::HelloWorldParams* release_helloworldparams();
  ::sl_pb::HelloWorldParams* mutable_helloworldparams();
  void set_allocated_helloworldparams(::sl_pb::HelloWorldParams* helloworldparams);
  private:
  const ::sl_pb::HelloWorldParams& _internal_helloworldparams() const;
  ::sl_pb::HelloWorldParams* _internal_mutable_helloworldparams();
  public:
  void unsafe_arena_set_allocated_helloworldparams(
      ::sl_pb::HelloWorldParams* helloworldparams);
  ::sl_pb::HelloWorldParams* unsafe_arena_release_helloworldparams();

  // required .sl_pb.KRAmevaEvent.FuncToCall funcToCall = 1;
  bool has_functocall() const;
  private:
  bool _internal_has_functocall() const;
  public:
  void clear_functocall();
  ::sl_pb::KRAmevaEvent_FuncToCall functocall() const;
  void set_functocall(::sl_pb::KRAmevaEvent_FuncToCall value);
  private:
  ::sl_pb::KRAmevaEvent_FuncToCall _internal_functocall() const;
  void _internal_set_functocall(::sl_pb::KRAmevaEvent_FuncToCall value);
  public:

  // @@protoc_insertion_point(class_scope:sl_pb.KRAmevaEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sl_pb::SetTaskParams* settaskparam_;
  ::sl_pb::SetEpisodeParams* setepisodeparams_;
  ::sl_pb::DrawMarkerAtParams* drawmarkeratparams_;
  ::sl_pb::DrawMarkerTrajParams* drawmarkertrajparams_;
  ::sl_pb::HelloWorldParams* helloworldparams_;
  int functocall_;
  friend struct ::TableStruct_ameva_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KRAmevaEvent

// required .sl_pb.KRAmevaEvent.FuncToCall funcToCall = 1;
inline bool KRAmevaEvent::_internal_has_functocall() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KRAmevaEvent::has_functocall() const {
  return _internal_has_functocall();
}
inline void KRAmevaEvent::clear_functocall() {
  functocall_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::sl_pb::KRAmevaEvent_FuncToCall KRAmevaEvent::_internal_functocall() const {
  return static_cast< ::sl_pb::KRAmevaEvent_FuncToCall >(functocall_);
}
inline ::sl_pb::KRAmevaEvent_FuncToCall KRAmevaEvent::functocall() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.funcToCall)
  return _internal_functocall();
}
inline void KRAmevaEvent::_internal_set_functocall(::sl_pb::KRAmevaEvent_FuncToCall value) {
  assert(::sl_pb::KRAmevaEvent_FuncToCall_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  functocall_ = value;
}
inline void KRAmevaEvent::set_functocall(::sl_pb::KRAmevaEvent_FuncToCall value) {
  _internal_set_functocall(value);
  // @@protoc_insertion_point(field_set:sl_pb.KRAmevaEvent.funcToCall)
}

// optional .sl_pb.SetTaskParams setTaskParam = 2;
inline bool KRAmevaEvent::_internal_has_settaskparam() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || settaskparam_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_settaskparam() const {
  return _internal_has_settaskparam();
}
inline const ::sl_pb::SetTaskParams& KRAmevaEvent::_internal_settaskparam() const {
  const ::sl_pb::SetTaskParams* p = settaskparam_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::SetTaskParams*>(
      &::sl_pb::_SetTaskParams_default_instance_);
}
inline const ::sl_pb::SetTaskParams& KRAmevaEvent::settaskparam() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.setTaskParam)
  return _internal_settaskparam();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_settaskparam(
    ::sl_pb::SetTaskParams* settaskparam) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settaskparam_);
  }
  settaskparam_ = settaskparam;
  if (settaskparam) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.setTaskParam)
}
inline ::sl_pb::SetTaskParams* KRAmevaEvent::release_settaskparam() {
  _has_bits_[0] &= ~0x00000001u;
  ::sl_pb::SetTaskParams* temp = settaskparam_;
  settaskparam_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::SetTaskParams* KRAmevaEvent::unsafe_arena_release_settaskparam() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.setTaskParam)
  _has_bits_[0] &= ~0x00000001u;
  ::sl_pb::SetTaskParams* temp = settaskparam_;
  settaskparam_ = nullptr;
  return temp;
}
inline ::sl_pb::SetTaskParams* KRAmevaEvent::_internal_mutable_settaskparam() {
  _has_bits_[0] |= 0x00000001u;
  if (settaskparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::SetTaskParams>(GetArena());
    settaskparam_ = p;
  }
  return settaskparam_;
}
inline ::sl_pb::SetTaskParams* KRAmevaEvent::mutable_settaskparam() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.setTaskParam)
  return _internal_mutable_settaskparam();
}
inline void KRAmevaEvent::set_allocated_settaskparam(::sl_pb::SetTaskParams* settaskparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(settaskparam_);
  }
  if (settaskparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settaskparam)->GetArena();
    if (message_arena != submessage_arena) {
      settaskparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settaskparam, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  settaskparam_ = settaskparam;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.setTaskParam)
}

// optional .sl_pb.SetEpisodeParams setEpisodeParams = 3;
inline bool KRAmevaEvent::_internal_has_setepisodeparams() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || setepisodeparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_setepisodeparams() const {
  return _internal_has_setepisodeparams();
}
inline const ::sl_pb::SetEpisodeParams& KRAmevaEvent::_internal_setepisodeparams() const {
  const ::sl_pb::SetEpisodeParams* p = setepisodeparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::SetEpisodeParams*>(
      &::sl_pb::_SetEpisodeParams_default_instance_);
}
inline const ::sl_pb::SetEpisodeParams& KRAmevaEvent::setepisodeparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.setEpisodeParams)
  return _internal_setepisodeparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_setepisodeparams(
    ::sl_pb::SetEpisodeParams* setepisodeparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setepisodeparams_);
  }
  setepisodeparams_ = setepisodeparams;
  if (setepisodeparams) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.setEpisodeParams)
}
inline ::sl_pb::SetEpisodeParams* KRAmevaEvent::release_setepisodeparams() {
  _has_bits_[0] &= ~0x00000002u;
  ::sl_pb::SetEpisodeParams* temp = setepisodeparams_;
  setepisodeparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::SetEpisodeParams* KRAmevaEvent::unsafe_arena_release_setepisodeparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.setEpisodeParams)
  _has_bits_[0] &= ~0x00000002u;
  ::sl_pb::SetEpisodeParams* temp = setepisodeparams_;
  setepisodeparams_ = nullptr;
  return temp;
}
inline ::sl_pb::SetEpisodeParams* KRAmevaEvent::_internal_mutable_setepisodeparams() {
  _has_bits_[0] |= 0x00000002u;
  if (setepisodeparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::SetEpisodeParams>(GetArena());
    setepisodeparams_ = p;
  }
  return setepisodeparams_;
}
inline ::sl_pb::SetEpisodeParams* KRAmevaEvent::mutable_setepisodeparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.setEpisodeParams)
  return _internal_mutable_setepisodeparams();
}
inline void KRAmevaEvent::set_allocated_setepisodeparams(::sl_pb::SetEpisodeParams* setepisodeparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(setepisodeparams_);
  }
  if (setepisodeparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setepisodeparams)->GetArena();
    if (message_arena != submessage_arena) {
      setepisodeparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setepisodeparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  setepisodeparams_ = setepisodeparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.setEpisodeParams)
}

// optional .sl_pb.DrawMarkerAtParams drawMarkerAtParams = 4;
inline bool KRAmevaEvent::_internal_has_drawmarkeratparams() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || drawmarkeratparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_drawmarkeratparams() const {
  return _internal_has_drawmarkeratparams();
}
inline const ::sl_pb::DrawMarkerAtParams& KRAmevaEvent::_internal_drawmarkeratparams() const {
  const ::sl_pb::DrawMarkerAtParams* p = drawmarkeratparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::DrawMarkerAtParams*>(
      &::sl_pb::_DrawMarkerAtParams_default_instance_);
}
inline const ::sl_pb::DrawMarkerAtParams& KRAmevaEvent::drawmarkeratparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.drawMarkerAtParams)
  return _internal_drawmarkeratparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_drawmarkeratparams(
    ::sl_pb::DrawMarkerAtParams* drawmarkeratparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawmarkeratparams_);
  }
  drawmarkeratparams_ = drawmarkeratparams;
  if (drawmarkeratparams) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.drawMarkerAtParams)
}
inline ::sl_pb::DrawMarkerAtParams* KRAmevaEvent::release_drawmarkeratparams() {
  _has_bits_[0] &= ~0x00000004u;
  ::sl_pb::DrawMarkerAtParams* temp = drawmarkeratparams_;
  drawmarkeratparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::DrawMarkerAtParams* KRAmevaEvent::unsafe_arena_release_drawmarkeratparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.drawMarkerAtParams)
  _has_bits_[0] &= ~0x00000004u;
  ::sl_pb::DrawMarkerAtParams* temp = drawmarkeratparams_;
  drawmarkeratparams_ = nullptr;
  return temp;
}
inline ::sl_pb::DrawMarkerAtParams* KRAmevaEvent::_internal_mutable_drawmarkeratparams() {
  _has_bits_[0] |= 0x00000004u;
  if (drawmarkeratparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::DrawMarkerAtParams>(GetArena());
    drawmarkeratparams_ = p;
  }
  return drawmarkeratparams_;
}
inline ::sl_pb::DrawMarkerAtParams* KRAmevaEvent::mutable_drawmarkeratparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.drawMarkerAtParams)
  return _internal_mutable_drawmarkeratparams();
}
inline void KRAmevaEvent::set_allocated_drawmarkeratparams(::sl_pb::DrawMarkerAtParams* drawmarkeratparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawmarkeratparams_);
  }
  if (drawmarkeratparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawmarkeratparams)->GetArena();
    if (message_arena != submessage_arena) {
      drawmarkeratparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawmarkeratparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  drawmarkeratparams_ = drawmarkeratparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.drawMarkerAtParams)
}

// optional .sl_pb.DrawMarkerTrajParams drawMarkerTrajParams = 5;
inline bool KRAmevaEvent::_internal_has_drawmarkertrajparams() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || drawmarkertrajparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_drawmarkertrajparams() const {
  return _internal_has_drawmarkertrajparams();
}
inline const ::sl_pb::DrawMarkerTrajParams& KRAmevaEvent::_internal_drawmarkertrajparams() const {
  const ::sl_pb::DrawMarkerTrajParams* p = drawmarkertrajparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::DrawMarkerTrajParams*>(
      &::sl_pb::_DrawMarkerTrajParams_default_instance_);
}
inline const ::sl_pb::DrawMarkerTrajParams& KRAmevaEvent::drawmarkertrajparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.drawMarkerTrajParams)
  return _internal_drawmarkertrajparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_drawmarkertrajparams(
    ::sl_pb::DrawMarkerTrajParams* drawmarkertrajparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawmarkertrajparams_);
  }
  drawmarkertrajparams_ = drawmarkertrajparams;
  if (drawmarkertrajparams) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.drawMarkerTrajParams)
}
inline ::sl_pb::DrawMarkerTrajParams* KRAmevaEvent::release_drawmarkertrajparams() {
  _has_bits_[0] &= ~0x00000008u;
  ::sl_pb::DrawMarkerTrajParams* temp = drawmarkertrajparams_;
  drawmarkertrajparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::DrawMarkerTrajParams* KRAmevaEvent::unsafe_arena_release_drawmarkertrajparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.drawMarkerTrajParams)
  _has_bits_[0] &= ~0x00000008u;
  ::sl_pb::DrawMarkerTrajParams* temp = drawmarkertrajparams_;
  drawmarkertrajparams_ = nullptr;
  return temp;
}
inline ::sl_pb::DrawMarkerTrajParams* KRAmevaEvent::_internal_mutable_drawmarkertrajparams() {
  _has_bits_[0] |= 0x00000008u;
  if (drawmarkertrajparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::DrawMarkerTrajParams>(GetArena());
    drawmarkertrajparams_ = p;
  }
  return drawmarkertrajparams_;
}
inline ::sl_pb::DrawMarkerTrajParams* KRAmevaEvent::mutable_drawmarkertrajparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.drawMarkerTrajParams)
  return _internal_mutable_drawmarkertrajparams();
}
inline void KRAmevaEvent::set_allocated_drawmarkertrajparams(::sl_pb::DrawMarkerTrajParams* drawmarkertrajparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawmarkertrajparams_);
  }
  if (drawmarkertrajparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawmarkertrajparams)->GetArena();
    if (message_arena != submessage_arena) {
      drawmarkertrajparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawmarkertrajparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  drawmarkertrajparams_ = drawmarkertrajparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.drawMarkerTrajParams)
}

// optional .sl_pb.HelloWorldParams HelloWorldParams = 6;
inline bool KRAmevaEvent::_internal_has_helloworldparams() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || helloworldparams_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_helloworldparams() const {
  return _internal_has_helloworldparams();
}
inline const ::sl_pb::HelloWorldParams& KRAmevaEvent::_internal_helloworldparams() const {
  const ::sl_pb::HelloWorldParams* p = helloworldparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sl_pb::HelloWorldParams*>(
      &::sl_pb::_HelloWorldParams_default_instance_);
}
inline const ::sl_pb::HelloWorldParams& KRAmevaEvent::helloworldparams() const {
  // @@protoc_insertion_point(field_get:sl_pb.KRAmevaEvent.HelloWorldParams)
  return _internal_helloworldparams();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_helloworldparams(
    ::sl_pb::HelloWorldParams* helloworldparams) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(helloworldparams_);
  }
  helloworldparams_ = helloworldparams;
  if (helloworldparams) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sl_pb.KRAmevaEvent.HelloWorldParams)
}
inline ::sl_pb::HelloWorldParams* KRAmevaEvent::release_helloworldparams() {
  _has_bits_[0] &= ~0x00000010u;
  ::sl_pb::HelloWorldParams* temp = helloworldparams_;
  helloworldparams_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sl_pb::HelloWorldParams* KRAmevaEvent::unsafe_arena_release_helloworldparams() {
  // @@protoc_insertion_point(field_release:sl_pb.KRAmevaEvent.HelloWorldParams)
  _has_bits_[0] &= ~0x00000010u;
  ::sl_pb::HelloWorldParams* temp = helloworldparams_;
  helloworldparams_ = nullptr;
  return temp;
}
inline ::sl_pb::HelloWorldParams* KRAmevaEvent::_internal_mutable_helloworldparams() {
  _has_bits_[0] |= 0x00000010u;
  if (helloworldparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::sl_pb::HelloWorldParams>(GetArena());
    helloworldparams_ = p;
  }
  return helloworldparams_;
}
inline ::sl_pb::HelloWorldParams* KRAmevaEvent::mutable_helloworldparams() {
  // @@protoc_insertion_point(field_mutable:sl_pb.KRAmevaEvent.HelloWorldParams)
  return _internal_mutable_helloworldparams();
}
inline void KRAmevaEvent::set_allocated_helloworldparams(::sl_pb::HelloWorldParams* helloworldparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(helloworldparams_);
  }
  if (helloworldparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(helloworldparams)->GetArena();
    if (message_arena != submessage_arena) {
      helloworldparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, helloworldparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  helloworldparams_ = helloworldparams;
  // @@protoc_insertion_point(field_set_allocated:sl_pb.KRAmevaEvent.HelloWorldParams)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sl_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sl_pb::KRAmevaEvent_FuncToCall> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sl_pb::KRAmevaEvent_FuncToCall>() {
  return ::sl_pb::KRAmevaEvent_FuncToCall_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ameva_2eproto
